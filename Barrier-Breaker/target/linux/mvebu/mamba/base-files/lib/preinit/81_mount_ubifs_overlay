#!/bin/sh

SYSCFG_UBIFS_MNT=/tmp/syscfg
get_current_rootfs_label() {
	boot_part=`/usr/sbin/fw_printenv -n boot_part`
	rootfs_label=""
	if [ "$boot_part" -eq 1 ]
	then
		# primary boot image
		rootfs_label="rootfs"
	elif [ "$boot_part" -eq 2 ]
	then
		# alternative boot image
		rootfs_label="alt_rootfs"
	else
		# try to guess from bootarg, should not come here
		grep -q "mtdblock5" /proc/cmdline && boot_part=1 \
			&& rootfs_label="rootfs"
		grep -q "mtdblock7" /proc/cmdline && boot_part=2 \
			&& rootfs_label="alt_rootfs"
		fw_setenv boot_part $boot_part
	fi
	echo "$rootfs_label"
}

mount_no_ubifs_syscfg_mtd() {
    mtd unlock $(get_current_rootfs_label)
    mount -o remount,rw /dev/root /
}

ubifs_syscfg_support() {
	# return 1 on failed
	mtdpart="$(find_mtd_part syscfg)"
	[ -z "$mtdpart" ] && return 1
	grep -qs ubifs /proc/filesystems ||  return 1
	mtdpart_idx="$(echo $mtdpart | tr -d "/dev/mtdblock")"
	[ ! -e $SYSCFG_UBIFS_MNT ] && mkdir -p $SYSCFG_UBIFS_MNT
	echo "found syscfg partition and ubifs support"
	return 0
}

try_ubifs_syscfg_mount() {
	overlay_mountpoint=$1
	if [ -z $overlay_mountpoint ]
	then
		overlay_mountpoint=/overlay
	fi
	recover_ubifs=0
	[ ! -e /dev/ubi0 ] && ubiattach -m $mtdpart_idx /dev/ubi_ctrl || recover_ubifs=1
	if [ $recover_ubifs -eq 0 ] 
	then
		ubi0_nod_id=`cat /sys/class/ubi/ubi0/dev | tr -s ":" " "`
		[ ! -e /dev/ubi0 ] && mknod /dev/ubi0 c ${ubi0_nod_id}
		if [ ! -e /sys/class/ubi/ubi0_0/dev ]
		then
			# no volume
			recover_ubifs=1
		else
			# check for "syscfg" volume
			ubi0_0_nod_id=`cat /sys/class/ubi/ubi0_0/dev | tr -s ":" " "`
			[ ! -e /dev/ubi0_0 ] && mknod /dev/ubi0_0 c ${ubi0_0_nod_id}
			{ ubinfo /dev/ubi0_0 | grep Name  | grep -qs "syscfg" ; } || \
			recover_ubifs=1
		fi
	fi
	if [ $recover_ubifs -eq 1 ]
	then
		echo "ubifs syscfg partition is damaged"
		echo "try to recover by formatting $mtdpart..."
		[ -e /dev/ubi0 ] && ubidetach -m $mtdpart_idx
		ubiformat -y -q /dev/mtd$mtdpart_idx
		ubiattach -m $mtdpart_idx /dev/ubi_ctrl
		ubi0_nod_id=`cat /sys/class/ubi/ubi0/dev | tr -s ":" " "`
		[ ! -e /dev/ubi0 ] && mknod /dev/ubi0 c ${ubi0_nod_id}
		ubimkvol /dev/ubi0 -n 0 -N syscfg -t dynamic --maxavsize
	fi
	# finally mount the ubifs
	mount -t ubifs -o noatime ubi0:syscfg $SYSCFG_UBIFS_MNT || return 1
	[ ! -d $SYSCFG_UBIFS_MNT/openwrt_overlay ] && mkdir -p $SYSCFG_UBIFS_MNT/openwrt_overlay
	mount -o bind $SYSCFG_UBIFS_MNT/openwrt_overlay $overlay_mountpoint
	return 0
}

ubifs_syscfg_rootfs_pivot() {
	echo "switching to ubifs sysfs overlay"
	fopivot /overlay /rom
	mount -o remount,ro /rom
}

do_mount_ubifs_overlay() {
	{ ubifs_syscfg_support && \
	try_ubifs_syscfg_mount && \
	ubifs_syscfg_rootfs_pivot ; } || mount_no_ubifs_syscfg_mtd
}

boot_hook_add preinit_main do_mount_ubifs_overlay
